@model List<Gym.View_Models.ShowTwoUsersMessages>
@{
    ViewBag.Title = "Messages";
    var curUserId = ViewBag.CurrentUserId as string;
    var otherUserId = ViewBag.OtherUserId as string;
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.8/signalr.min.js"></script>
<div id="messagesContainer">
    @foreach (var message in Model)
    {
        <div class="message @(message.IsCurUser ? "right" : "left") @(message.IsRead ? "" : "unread")">
            <div class="message-content">
                @if (!message.IsCurUser)
                {
                    <!-- Display other user's profile picture and info -->
                    <img src="@ViewBag.OtherUserImageUrl" alt="User Image" class="profile-pic" />
                    <span class="user-info">
                        @ViewBag.OtherUserFirstName @ViewBag.OtherUserLastName (@ViewBag.OtherUserEmail)
                    </span>
                }
                <p>@message.MessageBody</p>
                @if (!string.IsNullOrEmpty(message.AttachmentPath))
                {
                    <a href="@message.AttachmentPath" target="_blank">Attachment</a>
                }
                @if (!message.IsRead)
                {
                    <span class="unread-sign">Unread</span>
                }
            </div>
            <div class="message-info">
                <span>@message.SentDate.ToString("g")</span>
            </div>
        </div>
    }
</div>


<form id="messageForm">
    <input type="file" id="attachment" />
    <input type="text" id="messageInput" placeholder="Type your message..." />
    <button type="submit">Send</button>
</form>

<script>
    var chatconnection = new signalR.HubConnectionBuilder()
        .withUrl("/ChatHub") // Specify the URL of your SignalR hub
        .build();

    // Define the receiveMessage method to handle incoming messages
    chatconnection.on("receiveMessage", function (senderId, senderName, message, attachmentPath) {
        // Display the received message in the UI
        console.log("Received message from senderId: " + senderId);
        console.log("Sender Name: " + senderName);
        console.log("Message: " + message);
        console.log("Attachment Path: " + attachmentPath);

        // Construct the link to the user's profile
        var userProfileLink = document.createElement("a");
        userProfileLink.href = "/Trainee/showProfile?userId=" + senderId;
        userProfileLink.textContent = senderName;

        // Example: Append the message to a chat window
        var messageContainer = document.getElementById("messagesContainer");
        var messageDiv = document.createElement("div");

        // Display only the first 50 characters of the message
        var shortMessage = message.substring(0, 50);
        if (message.length > 50) {
            shortMessage += '...';
        }

        // You can format the message content as needed
        messageDiv.textContent = "From: ";
        messageDiv.appendChild(userProfileLink);
        messageDiv.textContent += ", Message: " + shortMessage;

        // If attachmentPath exists, create a link to it
        if (attachmentPath) {
            var attachmentLink = document.createElement("a");
            attachmentLink.href = attachmentPath;
            messageDiv.appendChild(document.createElement("br")); // Line break for readability
            messageDiv.appendChild(attachmentLink);
        }

        messageContainer.appendChild(messageDiv);
    });

    // Start the SignalR connection
    chatconnection.start().then(function () {
        console.log("Connected to SignalR Hub");
    }).catch(function (err) {
        console.error("Error connecting to SignalR Hub: " + err.toString());
    });

    $(function () {
        $('#messageForm').submit(function (event) {
            event.preventDefault();
            var message = $('#messageInput').val();
            var attachment = $('#attachment').prop('files')[0];

            // Handle file upload
            var formData = new FormData();
            formData.append('receiverEmail', '@ViewBag.OtherUserId');
            formData.append('content', message);
            formData.append('attachment', attachment);
            $.ajax({
                url: '/Message/SendMessage',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (result) {
                    chatconnection.invoke("SendMessage", '@curUserId', '@otherUserId', '@ViewBag.CurrentUserFirstName' + " " + '@ViewBag.CurrentUserLastName', message, result.attachmentPath)
                        .then(function () {
                            console.log("Message sent successfully");
                        }).catch(function (err) {
                            console.error("Error sending message: " + err.toString());
                        });
                    $('#messageInput').val('').focus();
                    $('#attachment').val('');
                },
                error: function (xhr, status, error) {
                    // Display error message to the user
                    alert('Error sending message: ' + error);
                }
            });
        });
    });
</script>

<style>
    #messagesContainer {
        height: 400px;
        overflow-y: scroll;
    }

    .message {
        margin: 10px;
    }

    .right {
        text-align: right;
    }

    .left {
        text-align: left;
    }

    .profile-pic {
        width: 30px;
        height: 30px;
        border-radius: 50%;
    }

    .message-content {
        display: inline-block;
        max-width: 70%;
        padding: 10px;
        border-radius: 5px;
        background: #f1f1f1;
    }

    .right .message-content {
        background: #d1ffd1;
    }

    .unread .message-content {
        border: 2px solid #ff6961;
    }

    .message-info {
        font-size: 0.8em;
        color: #888;
    }

    .unread-sign {
        color: #ff6961;
        font-weight: bold;
    }

    .user-info {
        display: block;
        font-size: 0.9em;
        color: #666;
    }
</style>
